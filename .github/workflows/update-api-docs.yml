name: Update Reference Documentation

on:
  workflow_dispatch:  # Allow manual triggers for now
    inputs:
      version:
        description: 'Version to generate docs for (e.g., "2.2.x", "2.1.x", "2.0.x") or "all" for all versions'
        required: true
        default: 'all'
        type: string
  # Later we can add:
  # push:
  #   paths:
  #     - 'api/v1alpha1/**'
  #   branches:
  #     - main

jobs:
  generate-api-docs:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout docs repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/kgateway.dev
          path: kgateway.dev

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: false

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install PyYAML
        run: pip install PyYAML

      - name: Parse versions from hugo.yaml
        run: |
          cd kgateway.dev
          python3 -c "
          import yaml
          import json
          
          with open('hugo.yaml', 'r') as f:
              config = yaml.safe_load(f)
          
          versions = config.get('params', {}).get('versions', [])
          version_data = []
          
          for version in versions:
              version_info = {
                  'version': version.get('version'),
                  'linkVersion': version.get('linkVersion'),
                  'url': version.get('url', '').lstrip('/')
              }
              version_data.append(version_info)
          
          print(json.dumps(version_data))
          " > versions.json
          
          echo "Parsed versions:"
          cat versions.json

      - name: Read max Kubernetes version
        run: |
          KUBE_VERSION=$(cat kgateway.dev/assets/docs/versions/max-kube.md | tr -d '\n')
          echo "KUBE_VERSION=$KUBE_VERSION" >> $GITHUB_ENV

      - name: Generate all documentation for selected version(s)
        run: |
          cd kgateway.dev
          
          # Process selected version(s) sequentially - generate all doc types per version
          python3 -c "
          import json
          import sys
          import subprocess
          import os
          import re
          
          def resolve_tag_for_version(version, link_version):
              '''Resolve the git tag to use for a given version'''
              if link_version == 'main':
                  return 'main'
              
              # For other linkVersions, get the latest tag matching the version pattern
              try:
                  result = subprocess.run(['git', 'ls-remote', '--tags', '--sort=-version:refname', 'https://github.com/kgateway-dev/kgateway.git'], 
                                        capture_output=True, text=True, check=True)
                  if result.stdout.strip():
                      # Filter tags that match our version pattern
                      # Create regex pattern: 2.1.x becomes v2\.1\.\d+
                      version_pattern = version.replace('.x', r'\.\d+')
                      pattern = f'v{version_pattern}'
                      matching_tags = []
                      for line in result.stdout.strip().split('\n'):
                          if 'refs/tags/' in line:
                              tag_name = line.split('/')[-1]
                              if re.match(pattern, tag_name) and not any(suffix in tag_name for suffix in ['-rc', '-beta', '-main', '-agw']):
                                  matching_tags.append(tag_name)
                      
                      if matching_tags:
                          # Sort by version and take the latest
                          matching_tags.sort(key=lambda x: [int(n) for n in x.replace('v', '').split('.')], reverse=True)
                          return matching_tags[0]
                      else:
                          print(f'No stable tags found for version {version}')
                          return None
                  else:
                      print(f'No tags found in repository for version {version}')
                      return None
              except subprocess.CalledProcessError as e:
                  print(f'Error fetching tags for version {version}: {e}')
                  return None
          
          def clone_repository(tag, kgateway_dir='kgateway'):
              '''Clone the kgateway repository at the specified tag'''
              # Clean up any existing directory
              if os.path.exists(kgateway_dir):
                  subprocess.run(['rm', '-rf', kgateway_dir], check=True)
              
              # Clone repository
              if tag == 'main':
                  subprocess.run(['git', 'clone', '--branch', 'main', '--depth', '1', 'https://github.com/kgateway-dev/kgateway.git', kgateway_dir], check=True)
              else:
                  subprocess.run(['git', 'clone', '--depth', '1', '--branch', tag, 'https://github.com/kgateway-dev/kgateway.git', kgateway_dir], check=True)
          
          def generate_api_docs(version, link_version, url_path, kgateway_dir='kgateway'):
              '''Generate API reference documentation'''
              print(f'  → Generating API docs for version {version}')
              
              # Check if the API directory exists
              api_path = f'{kgateway_dir}/api/v1alpha1/'
              if not os.path.exists(api_path):
                  print(f'    Warning: API directory {api_path} does not exist, skipping API docs')
                  return False
              
              # Generate API docs using individual subprocess calls
              subprocess.run(['envsubst'], input=open('scripts/crd-ref-docs-config.yaml').read(), text=True, stdout=open(f'crd-ref-docs-config-{link_version}.yaml', 'w'))
              
              subprocess.run([
                  'go', 'run', 'github.com/elastic/crd-ref-docs@v0.1.0',
                  f'--source-path={api_path}',
                  '--renderer=markdown',
                  '--output-path=./',
                  f'--config=crd-ref-docs-config-{link_version}.yaml'
              ], check=True)
              
              os.remove(f'crd-ref-docs-config-{link_version}.yaml')
              
              os.makedirs(f'content/docs/{url_path}/reference/', exist_ok=True)
              
              # Create API reference file with frontmatter
              with open(f'content/docs/{url_path}/reference/api.md', 'w') as f:
                  f.write('---\n')
                  f.write('title: API reference\n')
                  f.write('weight: 10\n')
                  f.write('---\n\n')
                  f.write(open('./out.md').read())
              
              os.remove('./out.md')
              
              # Format the generated docs
              subprocess.run(['sed', '-i', 's/Required: {}/Required/g', f'content/docs/{url_path}/reference/api.md'], check=True)
              subprocess.run(['sed', '-i', 's/Optional: {}/Optional/g', f'content/docs/{url_path}/reference/api.md'], check=True)
              subprocess.run(['sed', '-i', '/^# API Reference$/,/^$/d', f'content/docs/{url_path}/reference/api.md'], check=True)
              
              print(f'    ✓ Generated API docs in content/docs/{url_path}/reference/api.md')
              return True
          
          def generate_helm_docs(version, link_version, url_path, kgateway_dir='kgateway'):
              '''Generate Helm chart reference documentation'''
              print(f'  → Generating Helm docs for version {version}')
              
              os.makedirs(f'content/docs/{url_path}/reference/helm/', exist_ok=True)
              
              # Generate Helm docs for each chart
              charts = ['kgateway:helm', 'kgateway-crds:crds']
              generated_any = False
              
              for chart in charts:
                  dir_name, file_name = chart.split(':')
                  helm_path = f'{kgateway_dir}/install/helm/{dir_name}'
                  
                  # Check if Helm directory exists
                  if not os.path.exists(helm_path):
                      print(f'    Warning: Helm directory {helm_path} does not exist, skipping {file_name}')
                      continue
                  
                  result = subprocess.run([
                      'go', 'run', 'github.com/norwoodj/helm-docs/cmd/helm-docs@v1.14.2',
                      f'--chart-search-root={helm_path}',
                      '--dry-run'
                  ], capture_output=True, text=True, check=True)
                  
                  with open(f'content/docs/{url_path}/reference/helm/{file_name}.md', 'w') as f:
                      f.write(result.stdout)
                  
                  # Remove badge line and following empty line
                  subprocess.run(['sed', '-i', '/!\[Version:/,/^$/d', f'content/docs/{url_path}/reference/helm/{file_name}.md'], check=True)
                  
                  # Remove backticks from the Default column in the table
                  subprocess.run(['sed', '-i', 's/| \`\([^\`]*\)\` |/| \1 |/g', f'content/docs/{url_path}/reference/helm/{file_name}.md'], check=True)
                  
                  generated_any = True
              
              if generated_any:
                  print(f'    ✓ Generated Helm docs in content/docs/{url_path}/reference/helm/')
              return generated_any
          
          def generate_metrics_docs(version, link_version, url_path, kgateway_dir='kgateway'):
              '''Generate control plane metrics documentation'''
              print(f'  → Generating metrics docs for version {version}')
              
              os.makedirs(f'assets/docs/snippets/{link_version}', exist_ok=True)
              
              # Check if metrics tool exists
              metrics_tool_path = f'{kgateway_dir}/pkg/metrics/cmd/findmetrics/main.go'
              if not os.path.exists(metrics_tool_path):
                  print(f'    Warning: Metrics tool {metrics_tool_path} does not exist, skipping metrics docs')
                  return False
              
              # Run the metrics finder tool
              result = subprocess.run([
                  'go', 'run', metrics_tool_path, 
                  '--markdown', f'./{kgateway_dir}'
              ], capture_output=True, text=True, check=True)
              
              with open(f'assets/docs/snippets/{link_version}/metrics-control-plane.md', 'w') as f:
                  f.write(result.stdout)
              
              print(f'    ✓ Generated metrics docs in assets/docs/snippets/{link_version}/metrics-control-plane.md')
              return True
          
          # Main processing logic
          target_version = '${{ inputs.version }}'
          
          with open('versions.json', 'r') as f:
              versions = json.load(f)
          
          # Filter versions based on input
          if target_version != 'all':
              versions = [v for v in versions if v['version'] == target_version]
              if not versions:
                  print(f'Version {target_version} not found in versions.json')
                  sys.exit(1)
          
          print(f'Processing {len(versions)} version(s): {[v[\"version\"] for v in versions]}')
          
          for version_info in versions:
              version = version_info['version']
              link_version = version_info['linkVersion']
              url_path = version_info['url']
              
              print(f'\n🔄 Processing version: {version} (linkVersion: {link_version}, path: {url_path})')
              
              # Resolve tag once per version
              tag = resolve_tag_for_version(version, link_version)
              if not tag:
                  print(f'❌ Skipping version {version} - could not resolve tag')
                  continue
              
              print(f'   Using tag: {tag}')
              
              # Clone repository once per version
              try:
                  clone_repository(tag)
                  print(f'   ✓ Cloned repository')
              except subprocess.CalledProcessError as e:
                  print(f'❌ Failed to clone repository for version {version}: {e}')
                  continue
              
              # Generate all documentation types for this version
              success_count = 0
              
              try:
                  if generate_api_docs(version, link_version, url_path):
                      success_count += 1
              except Exception as e:
                  print(f'   ⚠ API docs failed: {e}')
              
              try:
                  if generate_helm_docs(version, link_version, url_path):
                      success_count += 1
              except Exception as e:
                  print(f'   ⚠ Helm docs failed: {e}')
              
              try:
                  if generate_metrics_docs(version, link_version, url_path):
                      success_count += 1
              except Exception as e:
                  print(f'   ⚠ Metrics docs failed: {e}')
              
              # Clean up repository after processing this version
              subprocess.run(['rm', '-rf', 'kgateway'], check=True)
              
              print(f'✅ Completed version {version} - generated {success_count}/3 doc types')
          
          print('\n🎉 All versions processed!')
          "


      - name: Clean up temporary directories
        run: |
          cd kgateway.dev
          rm -rf kgateway

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          path: kgateway.dev
          commit-message: "docs: Update API, Helm, and Metrics reference docs for ${{ inputs.version == 'all' && 'all versions' || inputs.version }}"
          signoff: true
          title: "Update API, Helm, and Metrics reference docs for ${{ inputs.version == 'all' && 'all versions' || inputs.version }}"
          body: |
            Automated API, Helm, and Metrics documentation update for ${{ inputs.version == 'all' && 'all supported versions' || format('version {0}', inputs.version) }} based on the latest tags from the **kgateway** repository.
            
            This PR was automatically generated by the [**Update Reference documentation** workflow](https://github.com/kgateway-dev/kgateway.dev/actions/workflows/update-api-docs.yml).
            
            **Target version:** `${{ inputs.version }}`
            
            **Updates included:**
            - API reference documentation 
            - Helm chart reference documentation
            - Control plane metrics documentation
            - Each version uses the latest corresponding tag from the kgateway repository
            - Docs are placed in versioned directories (`content/docs/{VERSION}/` and `assets/docs/snippets/{VERSION}/`)
          branch: api-gen-update
          branch-suffix: timestamp
          delete-branch: true
          base: main
          labels: |
            documentation
            automated pr