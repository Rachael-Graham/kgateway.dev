---
title: Agent Gateway
weight: 50 
description: 
---

{{< callout type="warning" >}} 
{{< reuse "docs/versions/warn-2-1-only.md" >}}
{{< /callout >}}

In this guide, you learn how to set up kgateway as the control plane for your Agent Gateway so that you can proxy requests to an MCP or A2A target. 

## About Agent Gateway

Agent Gateway is an open source, highly available, highly scalable, and enterprise-grade data plane that provides AI connectivity for agents and tools in any environment. With Agent Gateway, you can manage agent connectivity with support for agent protocols, such as Model Context Protocol (MCP) and agent-to-agent (A2A), and the ability to integrate existing REST APIs as agent-native tools. A built-in self-service developer portal allows agent developers to easily connect, discover, federate, integrate, and secure agents and tools in any environment, including bare metal, VMs, containers, and Kubernetes.

To learn more about Agent Gateway, see the [Agent Gateway docs](https://agentgateway.dev/docs/about/).

You can set up kgateway as the control plane for your Agent Gateway instances to manage and automate the lifecycle of your Agent Gateway instances. 

## Before you begin

[Get started](/docs/quickstart/) to install the Kubernetes Gateway API CRDs and kgateway.

## Setup

1. Get the values of your kgateway installation. 
   ```sh
   helm get values kgateway -n kgateway-system -o yaml > kgateway.yaml                                                  
   open kgateway.yaml
   ```
2. Update your kgateway installation to enable the Agent Gateway integration.
   ```sh
   helm upgrade -i -n kgateway-system kgateway oci://cr.kgateway.dev/kgateway-dev/charts/kgateway \
    -f kgateway.yaml \
    --set agentGateway.enabled=true \
    --version v{{< reuse "docs/versions/patch-dev.md" >}}
   ```
3. Verify that the `KGW_ENABLE_AGENT_GATEWAY` environment variable is set on the kgateway deployment. 
   ```sh
   kubectl get deployment kgateway -n kgateway-system -o yaml
   ```
   
   Example output: 
   ```console {hl_lines=[29,30]}
   ...
   spec:
      containers:
      - env:
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              divisor: "1"
              resource: limits.memory
        - name: GOMAXPROCS
          valueFrom:
            resourceFieldRef:
              divisor: "1"
              resource: limits.cpu
        - name: KGW_LOG_LEVEL
          value: info
        - name: KGW_XDS_SERVICE_NAME
          value: kgateway
        - name: KGW_XDS_SERVICE_PORT
          value: "9977"
        - name: KGW_DEFAULT_IMAGE_REGISTRY
          value: cr.kgateway.dev/kgateway-dev
        - name: KGW_DEFAULT_IMAGE_TAG
          value: v2.1.0-main
        - name: KGW_DEFAULT_IMAGE_PULL_POLICY
          value: IfNotPresent
        - name: KGW_DISCOVERY_NAMESPACE_SELECTORS
          value: '[]'
        - name: KGW_ENABLE_AGENT_GATEWAY
          value: "true"
   ...
   ```
4. Verify that you have the `agentgateway` GatewayClass. 
   ```sh
   kubectl get gatewayclass agentgateway -o yaml
   ``` 

5. Create a Gateway that uses the `agentgateway` GatewayClass. The Gateway defines an MCP and an A2A listener. 
   ```yaml
   kubectl apply -f- <<EOF
   kind: Gateway
   apiVersion: gateway.networking.k8s.io/v1
   metadata:
     name: agent-gateway
     namespace: kgateway-system
   spec:
     gatewayClassName: agentgateway
     listeners:
       - protocol: kgateway.dev/mcp
         port: 8080
         name: mcp
         allowedRoutes:
           namespaces:
             from: All
       - protocol: kgateway.dev/a2a
         port: 9090
         name: a2a
         allowedRoutes:
           namespaces:
             from: All
   EOF
   ```  

6. Verify that the Gateway is created and you have an `agent-gateway` proxy up and running. 
   ```sh
   kubectl get deployment agent-gateway -n kgateway-system
   ```
   
   Example output: 
   ```console
   NAME            READY   UP-TO-DATE   AVAILABLE   AGE
   agent-gateway   1/1     1            1           17m
   ```

7. Create an MCP or A2A target and expose it on your Agent Gateway instance. 
   {{< callout type="info" >}}
   Note that adding targets by using the Agent Gateway UI is currently not supported. To expose a target on your Agent Gateway, you must have a service that specifies `appProtocol: kgateway.dev/mcp` or `appProtocol: kgateway.dev/a2a` as shown in the following examples. 
   {{< /callout >}}
   {{< tabs items="Model Context Protocol (MCP),Agent to Agent (A2A)" >}}
   {{% tab %}}
   1. Create an MCP target. The following example creates an MCP tool server `server-everything` and exposes that server on the MCP port that is defined on your Agent Gateway instance. To expose the server, the server's service must configure `appProtocol: kgateway.dev/mcp`. Agent Gateway automatically discovers and exposes services with that app protocol. 
   
      ```yaml
      kubectl apply -f- <<EOF
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: everything
        labels:
          app: everything
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: everything
        template:
          metadata:
            labels:
              app: everything
          spec:
            containers:
              - name: everything
                image: ghcr.io/agentgateway/agentgateway:latest-ext
                args:
                  - -f
                  - /etc/agentgateway/config.json
                ports:
                  - containerPort: 3000
                volumeMounts:
                  - name: everything-config
                    mountPath: /etc/agentgateway/config.json
                    subPath: config.json
            volumes:
              - name: everything-config
                configMap:
                  name: everything-config
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: everything
      spec:
        selector:
          app: everything
        ports:
          - protocol: TCP
            port: 3000
            targetPort: 3000
            appProtocol: kgateway.dev/mcp
      ---
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: everything-config
      data:
        config.json: |
          {
            "type": "static",
            "listeners": [
              {
                "name": "sse",
                "protocol": "MCP",
                "sse": {
                  "address": "[::]",
                  "port": 3000
                }
              }
            ],
            "targets": {
              "mcp": [
                {
                  "name": "everything",
                  "stdio": {
                    "cmd": "npx",
                    "args": [
                      "-y",
                      "@modelcontextprotocol/server-everything"
                    ]
                  }
                }
              ]
            }
          }
      EOF
      ```
   2. Port-forward the Agent Gateway on port 8080 and 19000. Port 8080 is the port the MCP tool server is exposed on. Port 19000 is used so that you can access the Agent Gateway playground to test requests to your MCP tool server. 
      ```sh
      kubectl port-forward deployment/agent-gateway -n kgateway-system 19000
      kubectl port-forward deployment/agent-gateway -n kgateway-system 8080
      ```
   
   3. Open the [Agent Gateway playground](http://localhost:19000/ui/playground/). 
   4. Select the `localhost:8080 (MCP)` listener and click **Connect**. 
   5. From the **Available Tools** list, select the `everything_echo` tool.
   6. In the message field, enter any string, such as `hello world`, and click **Run Tool**.
   7. Verify that you see your message echoed in the **Response** card.
      {{< reuse-image src="img/agentgateway-mcp.png" >}}
      
   {{% /tab %}}
   {{% tab %}}
   1. Create an A2A target. The following example creates an A2A agent and exposes it on the A2A port that is defined on your Agent Gateway instance. To expose the server, the server's service must configure `appProtocol: kgateway.dev/a2a`. Agent Gateway automatically discovers and exposes services with that app protocol. 
      ```yaml
      kubectl apply -f- <<EOF
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: a2a-agent
        labels:
          app: a2a-agent
      spec:
        selector:
          matchLabels:
            app: a2a-agent
        template:
          metadata:
            labels:
              app: a2a-agent
          spec:
            containers:
            - name: a2a-agent
              image: ghcr.io/kgateway-dev/test-a2a-agent:1.0.0-ci1
              ports:
                - containerPort: 9090
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: a2a-agent
      spec:
        selector:
          app: a2a-agent
        type: ClusterIP
        ports:
          - protocol: TCP
            port: 9090
            targetPort: 9090
            appProtocol: kgateway.dev/a2a
      EOF
      ```
   2. Port-forward the Agent Gateway on port 9090 and 19000. Port 9090 is the port the A2A agent is exposed on. Port 19000 is used so that you can access the Agent Gateway playground to test requests to your MCP tool server. 
      ```sh
      kubectl port-forward deployment/agent-gateway -n kgateway-system 19000
      kubectl port-forward deployment/agent-gateway -n kgateway-system 9090
      ```
   
   3. Open the [Agent Gateway playground](http://localhost:19000/ui/playground/). 
   4. Select the `localhost:9090 (A2A)` listener and click **Connect**. 
   5. From the **Available Skills** list, select the `everything_echo` tool.
   6. In the message field, enter any string, such as `hello world`, and click **Run Tool**.
   7. Verify that you see your message echoed in the **Response** card.
      {{< reuse-image src="img/agentgateway-mcp.png" >}}
   {{% /tab %}}
   {{< /tabs >}}
   
